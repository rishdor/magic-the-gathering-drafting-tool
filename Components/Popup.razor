@{
    var showClass = IsVisible ? "d-block" : "d-none";
}

<style>
    .toast {
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        z-index: 9999;
        width: 1000px;
        height: 600px;
        border-radius: 10px;
        opacity: 1;
        background-color: rgb(231, 231, 231); 
    }
    .dark-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        z-index: 9998;
    }
</style>

<div class="dark-overlay @showClass" @onclick="Close">
    <div class="toast-container p-3 @showClass popup" data-bs-autohide="true" data-bs-delay="5000">
        <div class="toast show" role="alert" aria-live="assertive" aria-atomic="true">
            <div class="toast-header">
                <strong class="me-auto">@HeaderText</strong>
                <button type="button" class="btn-close" aria-label="Close" @onclick="Close"></button>
            </div>
            <div class="toast-body">
                @BodyText
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public bool IsVisible { get; set; }

    [Parameter]
    public EventCallback<bool> IsVisibleChanged { get; set; }

    [Parameter]
    public string? HeaderText { get; set; }

    [Parameter]
    public string? BodyText { get; set; }

    public void Show(string bodyText, string headerText = "")
    {
        Close();
        HeaderText = headerText;
        BodyText = bodyText;
        IsVisible = true;
        StateHasChanged();
    }

    public void Close()
    {
        HeaderText = string.Empty;
        BodyText = string.Empty;
        IsVisible = false;
        StateHasChanged();
    }
}
