@page "/register"
@using magick.Models.Forms
@using magick.Services
@inject UserService service
@using System.Text.RegularExpressions

<h3>Register</h3>

<EditForm Model="user" OnValidSubmit="HandleValidSubmit" FormName="RegistationForm">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="username">Username:</label>
        <InputText id="username" class="form-control" @bind-Value="user.Username" />
    </div>

    <div class="form-group">
        <label for="email">Email:</label>
        <InputText id="email" class="form-control" @bind-Value="user.Email" />
    </div>

    <div class="form-group">
        <label for="password">Password:</label>
        <InputText id="password" type='password' class="form-control" @bind-Value="user.Password" autocomplete="off" />
    </div>

    <div class="form-group">
        <label for="repeatPassword">Repeat password:</label>
        <InputText id="repeatPassword" type='password' class="form-control" @bind-Value="repeatPassword" autocomplete="off" />
    </div>

    <button type="submit" class="btn btn-primary">Register</button>
</EditForm>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger mt-2">
        @errorMessage
    </div>
}

@code {
    [SupplyParameterFromForm]
    public UserRegistration user { get; set; } = new UserRegistration();
    [SupplyParameterFromForm]
    public string? repeatPassword { get; set; }

    private string? errorMessage;

    private async Task HandleValidSubmit()
    {
        if (user.Email != null && !ValidateEmailPattern(user.Email))
        {
            errorMessage = "Invalid email format";
            return;
        }
        if (!CheckPasswordCriteria(user.Password))
        {
            errorMessage = "Password must contain at least 8 characters, one uppercase letter, one lowercase letter and one number";
            return;
        }
        if (user.Password != repeatPassword)
        {
            errorMessage = "Passwords do not match";
            return;
        }
        var result = await service.RegisterUser(user);
        if (result=="success")
        {
            errorMessage = string.Empty;
            user = new UserRegistration();
            repeatPassword = string.Empty;
            //create a session and redirect to home
        }
        else if (result=="username exists")
        {
            errorMessage = "User with this username already exists";
        }
        else if (result == "email exists")
        {
            errorMessage = "User with this email already exists";
        }
        else
        {
            errorMessage = "An error occurred";
        }
    }

    private static bool CheckPasswordCriteria(string password)
    {
        string pattern = @"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d).{8,}$";
        return Regex.IsMatch(password, pattern);
    }
    private static bool ValidateEmailPattern(string email)
    {
        string pattern = @"^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$";
        return Regex.IsMatch(email, pattern);
    }
}