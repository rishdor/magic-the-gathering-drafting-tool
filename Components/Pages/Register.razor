@page "/register"
@using magick.Models.Forms
@using magick.Services
@inject UserService service
@using System.Text.RegularExpressions

<h3>Register</h3>

<EditForm Model="user" OnValidSubmit="HandleValidSubmit" FormName="RegistationForm">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="username">Username:</label>
        <InputText id="username" class="form-control" @bind-Value="user.Username" />
    </div>

    <div class="form-group">
        <label for="email">Email:</label>
        <InputText id="email" class="form-control" @bind-Value="user.Email" />
    </div>

    <div class="form-group">
        <label for="password">Password:</label>
        <InputText id="password" type='password' class="form-control" @bind-Value="user.Password" autocomplete="off" />
    </div>

    <div class="form-group">
        <label for="repeatPassword">Repeat password:</label>
        <InputText id="repeatPassword" type='password' class="form-control" @bind-Value="repeatPassword" autocomplete="off" />
    </div>

    <button type="submit" class="btn btn-primary">Register</button>
</EditForm>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger mt-2">
        @errorMessage
    </div>
}

@code {
    [SupplyParameterFromForm]
    public UserRegistration user { get; set; } = new UserRegistration();
    [SupplyParameterFromForm]
    public string? repeatPassword { get; set; }

    private string? errorMessage;

    private async Task HandleValidSubmit()
    {
        if (user.Password != repeatPassword)
        {
            errorMessage = "Passwords do not match";
            return;
        }
        var result = await service.RegisterUser(user);
        switch(result) {
            case UserService.RegistrationResult.SUCCESS:
                errorMessage = string.Empty;
                user = new UserRegistration();
                repeatPassword = string.Empty;
                break;
            case UserService.RegistrationResult.USERNAME_TAKEN:
                errorMessage = "User with this username already exists.";
                break;
            case UserService.RegistrationResult.EMAIL_TAKEN:
                errorMessage = "User with this email already exists.";
                break;
            case UserService.RegistrationResult.GENERAL_FAILURE:
                errorMessage = "An error occurred.";
                break;
        }
    }
}